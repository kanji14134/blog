<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Test v4 Blog</title>
    <link>/blog/categories/r/</link>
    <description>Recent content in R on Test v4 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Apr 2017 20:30:40 +0900</lastBuildDate>
    
	<atom:link href="/blog/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>sf,instead of sp</title>
      <link>/blog/2017/04/sfinstead-of-sp/</link>
      <pubDate>Wed, 19 Apr 2017 20:30:40 +0900</pubDate>
      
      <guid>/blog/2017/04/sfinstead-of-sp/</guid>
      <description>今話題のsfパッケージ、まさか知らない人はいないでしょう??。
今回はじめて使いましたので、簡単にメモ。
library(dplyr) ## Warning: パッケージ &amp;#39;dplyr&amp;#39; はバージョン 3.4.2 の R の下で造られました ## ## 次のパッケージを付け加えます: &amp;#39;dplyr&amp;#39; ## 以下のオブジェクトは &amp;#39;package:stats&amp;#39; からマスクされています: ## ## filter, lag ## 以下のオブジェクトは &amp;#39;package:base&amp;#39; からマスクされています: ## ## intersect, setdiff, setequal, union library(sf) ## Warning: パッケージ &amp;#39;sf&amp;#39; はバージョン 3.4.4 の R の下で造られました ## Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3 Shapeファイルからの読み込みの例が多かったので、
data.frameから作る場合をやってみます。 irisに適当に座標をつけます。
この場合はst_as_sf()で簡単に作ることができます。 SP*オブジェクトよりもスッキリしてる気がします。
iris_sf_wgs&amp;lt;- iris %&amp;gt;% mutate(x = rnorm(dim(iris)[1],140,1), y = rnorm(dim(iris)[1],35,1)) %&amp;gt;% st_as_sf(coords = c(&amp;quot;x&amp;quot;,&amp;quot;y&amp;quot;), crs = 4326) iris_sf_wgs %&amp;gt;% head() ## Simple feature collection with 6 features and 5 fields ## geometry type: POINT ## dimension: XY ## bbox: xmin: 139.</description>
    </item>
    
    <item>
      <title>Maxent 3.40</title>
      <link>/blog/2017/03/maxent-3.40/</link>
      <pubDate>Thu, 23 Mar 2017 18:23:43 +0900</pubDate>
      
      <guid>/blog/2017/03/maxent-3.40/</guid>
      <description>###Maxentとは 在データだけで分布予測をするすごいやつ。
不在データが取りにくい野生生物を対象とする生態学などで大人気です。
今回はバージョンアップでオープンソース化&amp;amp;Rパッケージがでたのでその紹介です。 くわしくは元論文を読みましょう? Maxent website
####Install Rパッケージの名前注意してください。eとnが逆で、maxnetとなっています。maxentは別のやつです。
install.packages(&amp;quot;maxnet&amp;quot;) ####Data チュートリアルテキストが、RのコードではなくJSのGUIの操作法になっています。
チュートリアルデータをダウンロードしてください。解凍後、ワーキングディレクトリを指定してください。
library(maxnet) library(tidyverse) library(magrittr) library(raster) d &amp;lt;- read_csv(&amp;quot;samples/bradypus.csv&amp;quot;) %&amp;gt;% dplyr::select(-species) %&amp;gt;% set_colnames(c(&amp;quot;long&amp;quot;,&amp;quot;lat&amp;quot;)) p &amp;lt;- SpatialPoints(d[,c(&amp;quot;long&amp;quot;,&amp;quot;lat&amp;quot;)],proj4string = CRS(&amp;quot;+init=epsg:4326&amp;quot;)) r &amp;lt;- stack(dir(&amp;quot;layers&amp;quot;,pattern = &amp;quot;asc$&amp;quot;,full.names = TRUE)) crs(r) &amp;lt;- CRS(&amp;quot;+init=epsg:4326&amp;quot;) pとrにsp&amp;amp;rasterオブジェクトとして読み込みました。 pはノドチャミユビナマケモノBradypus variegatusの位置データです。 rは標高や気候などの説明変数のようです。プロットしてみましょう。
plot(r[[&amp;quot;h_dem&amp;quot;]]) plot(p,add=TRUE) plot(r) ####Run Maxentは不在データの代わりに対象地域内に十分な数のランダムなポイントを落とし、それを“背景データ”として使います。
GUIのソフトの方は上のようなGISデータ形式そのまんまで解析してくれますが、
Rパッケージの関数の方はglmnetのラッパーみたいなので、位置情報から説明変数を取ってきてあげないといけません。
train &amp;lt;- raster::extract(r,p) %&amp;gt;% data.frame(.,presence = 1) set.seed(123) bg &amp;lt;- sampleRandom(r,1000,na.rm = TRUE) %&amp;gt;% data.frame(.,presence = 0) d &amp;lt;- rbind(train,bg) %&amp;gt;% filter(complete.</description>
    </item>
    
  </channel>
</rss>