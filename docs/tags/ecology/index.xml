<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ecology on kh-blog</title>
    <link>/blog/tags/ecology/</link>
    <description>Recent content in Ecology on kh-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Mar 2017 18:23:43 +0900</lastBuildDate>
    
	<atom:link href="/blog/tags/ecology/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maxent 3.40</title>
      <link>/blog/2017/03/maxent-3.40/</link>
      <pubDate>Thu, 23 Mar 2017 18:23:43 +0900</pubDate>
      
      <guid>/blog/2017/03/maxent-3.40/</guid>
      <description>###Maxentとは 在データだけで分布予測をするすごいやつ。
不在データが取りにくい野生生物を対象とする生態学などで大人気です。
今回はバージョンアップでオープンソース化&amp;amp;Rパッケージがでたのでその紹介です。 くわしくは元論文を読みましょう? Maxent website
####Install Rパッケージの名前注意してください。eとnが逆で、maxnetとなっています。maxentは別のやつです。
install.packages(&amp;quot;maxnet&amp;quot;) ####Data チュートリアルテキストが、RのコードではなくJSのGUIの操作法になっています。
チュートリアルデータをダウンロードしてください。解凍後、ワーキングディレクトリを指定してください。
library(maxnet) library(tidyverse) library(magrittr) library(raster) d &amp;lt;- read_csv(&amp;quot;samples/bradypus.csv&amp;quot;) %&amp;gt;% dplyr::select(-species) %&amp;gt;% set_colnames(c(&amp;quot;long&amp;quot;,&amp;quot;lat&amp;quot;)) p &amp;lt;- SpatialPoints(d[,c(&amp;quot;long&amp;quot;,&amp;quot;lat&amp;quot;)],proj4string = CRS(&amp;quot;+init=epsg:4326&amp;quot;)) r &amp;lt;- stack(dir(&amp;quot;layers&amp;quot;,pattern = &amp;quot;asc$&amp;quot;,full.names = TRUE)) crs(r) &amp;lt;- CRS(&amp;quot;+init=epsg:4326&amp;quot;) pとrにsp&amp;amp;rasterオブジェクトとして読み込みました。 pはノドチャミユビナマケモノBradypus variegatusの位置データです。 rは標高や気候などの説明変数のようです。プロットしてみましょう。
plot(r[[&amp;quot;h_dem&amp;quot;]]) plot(p,add=TRUE) plot(r) ####Run Maxentは不在データの代わりに対象地域内に十分な数のランダムなポイントを落とし、それを“背景データ”として使います。
GUIのソフトの方は上のようなGISデータ形式そのまんまで解析してくれますが、
Rパッケージの関数の方はglmnetのラッパーみたいなので、位置情報から説明変数を取ってきてあげないといけません。
train &amp;lt;- raster::extract(r,p) %&amp;gt;% data.frame(.,presence = 1) set.seed(123) bg &amp;lt;- sampleRandom(r,1000,na.rm = TRUE) %&amp;gt;% data.frame(.,presence = 0) d &amp;lt;- rbind(train,bg) %&amp;gt;% filter(complete.</description>
    </item>
    
  </channel>
</rss>